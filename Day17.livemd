# Day 17

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input = File.read!("inputs/17.txt") |> String.codepoints()
test_input = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>" |> String.codepoints()
```

## Dealing with parsing the rock shapes

```elixir
defmodule RockShape do
  def to_coords(rock_shape_string) do
    rock_shape_string
    |> String.split("\n")
    |> Enum.reverse()
    |> Enum.with_index()
    |> Enum.flat_map(fn {line, y} -> line_to_coord(line, y) end)
  end

  def line_to_coord(line, y) do
    line
    |> String.codepoints()
    |> Enum.with_index()
    |> Enum.filter(fn {c, _x} -> c == "#" end)
    |> Enum.map(fn {_c, x} -> {x, y} end)
  end
end
```

```elixir
rock_shapes =
  [
    """

    ####

    """,
    """

    .#.
    ###
    .#.

    """,
    """

    ..#
    ..#
    ###

    """,
    """

    #
    #
    #
    #

    """,
    """

    ##
    ##

    """
  ]
  |> Enum.map(&String.trim/1)
  |> Enum.map(&RockShape.to_coords/1)
```

## Getting jet pattern and rock shapes given indices

```elixir
defmodule Inputs do
  def get_rock(rock_shapes, i) do
    rock_shapes_length = rock_shapes |> Enum.count()
    rock_shapes |> Enum.at(rem(i, rock_shapes_length))
  end

  def get_jet_pattern(jet_patterns, i) do
    jet_patterns_length = jet_patterns |> Enum.count()

    case jet_patterns |> Enum.at(rem(i, jet_patterns_length)) do
      "<" -> :left
      ">" -> :right
    end
  end
end

Inputs.get_rock(rock_shapes, 3) |> IO.inspect()
Inputs.get_jet_pattern(test_input, 3) |> IO.inspect()
```

## Printing rock patterns to screen

Used for debugging below...

```elixir
defmodule Visualise do
  def visualise(rock_map, y_range) do
    visualise(rock_map, MapSet.new(), y_range)
  end

  def visualise(rock_map, current_rock_map, y_range) do
    get_row_strings(rock_map, current_rock_map, y_range)
    |> Enum.each(&IO.puts/1)
  end

  def get_row_strings(rock_map, y_range) do
    get_row_strings(rock_map, MapSet.new(), y_range)
  end

  def get_row_strings(rock_map, current_rock_map, {y_start, y_end}) do
    y_start..y_end
    |> Enum.reverse()
    |> Enum.map(fn y -> get_row_string(rock_map, current_rock_map, y) end)
  end

  def get_row_string(rock_map, current_rock_map, y) do
    0..6
    |> Enum.map(fn x -> get_char(rock_map, current_rock_map, {x, y}) end)
    |> Enum.join()
  end

  def get_char(rock_map, current_rock_map, coord) do
    case {MapSet.member?(rock_map, coord), MapSet.member?(current_rock_map, coord)} do
      {true, true} -> "!"
      {true, false} -> "#"
      {false, true} -> "@"
      {false, false} -> "."
    end
  end
end
```

```elixir
defmodule RockFall do
  @left_side 0
  @right_side 6

  def solve(rock_shapes, jet_patterns, total_rocks) do
    add_rocks(rock_shapes, jet_patterns, MapSet.new(), 0, 0, 0, total_rocks)
  end

  def add_rocks(_rock_shapes, _jet_patterns, rock_positions, max_height, step, _rock_index, 0) do
    {rock_positions, max_height, step}
  end

  def add_rocks(
        rock_shapes,
        jet_patterns,
        rock_positions,
        max_height,
        step,
        rock_index,
        rocks_remaining
      ) do
    {updated_rock_positions, next_height, next_step} =
      add_new_rock(rock_shapes, jet_patterns, rock_positions, max_height, step, rock_index)

    add_rocks(
      rock_shapes,
      jet_patterns,
      updated_rock_positions,
      max(next_height, max_height),
      next_step,
      rock_index + 1,
      rocks_remaining - 1
    )
  end

  def add_new_rock(
        rock_shapes,
        jet_patterns,
        fallen_rock_positions,
        max_height,
        step_index,
        rock_index
      ) do
    next_rock =
      Inputs.get_rock(rock_shapes, rock_index)
      |> Enum.map(fn c -> c |> add_coord({2, 3 + max_height}) end)

    # IO.puts("\n")
    # Visualise.visualise(fallen_rock_positions, next_rock |> MapSet.new(), {max_height - 5, max_height + 7})

    move_sideways(fallen_rock_positions, next_rock, jet_patterns, step_index)
  end

  def move_sideways(fallen_rock_positions, current_rock_positions, jet_patterns, step_index) do
    direction =
      case Inputs.get_jet_pattern(jet_patterns, step_index) do
        :left -> {-1, 0}
        :right -> {1, 0}
      end

    new_rock_positions = current_rock_positions |> Enum.map(fn c -> c |> add_coord(direction) end)

    if new_rock_positions |> Enum.any?(fn p -> sideways_overlap?(fallen_rock_positions, p) end) do
      move_down(fallen_rock_positions, current_rock_positions, jet_patterns, step_index + 1)
    else
      move_down(fallen_rock_positions, new_rock_positions, jet_patterns, step_index + 1)
    end
  end

  def move_down(fallen_rock_positions, current_rock_positions, jet_patterns, step_index) do
    new_rock_positions = current_rock_positions |> Enum.map(fn p -> p |> add_coord({0, -1}) end)

    if not (new_rock_positions
            |> Enum.any?(fn p -> down_overlap?(fallen_rock_positions, p) end)) do
      move_sideways(fallen_rock_positions, new_rock_positions, jet_patterns, step_index)
    else
      new_max_height = current_rock_positions |> Enum.map(fn {_x, y} -> y end) |> Enum.max()

      updated_fallen_rock_positions =
        current_rock_positions |> MapSet.new() |> MapSet.union(fallen_rock_positions)

      {updated_fallen_rock_positions, new_max_height + 1, step_index}
    end
  end

  def sideways_overlap?(fallen_rock_positions, coord) do
    hits_edges?(coord) or hits_fallen_rocks?(fallen_rock_positions, coord)
  end

  def down_overlap?(fallen_rock_positions, {x, y}) do
    hits_fallen_rocks?(fallen_rock_positions, {x, y}) or y < 0
  end

  def hits_edges?({x, _y}) do
    x < @left_side or x > @right_side
  end

  def hits_fallen_rocks?(fallen_rock_positions, rock_position) do
    fallen_rock_positions |> MapSet.member?(rock_position)
  end

  def add_coord({x1, y1}, {x2, y2}) do
    {x1 + x2, y1 + y2}
  end
end

{test_pattern, test_max_height, _} = RockFall.solve(rock_shapes, test_input, 2022)
```

With the real input...

```elixir
{_fallen_rocks, height, _step} = RockFall.solve(rock_shapes, input, 2022)
height
```

## Part 2

Save the top 30 (number picked out of thin air) rows after each rock, and look for repeats of the same row pattern and indices into jet patterns/rocks... Then do some maths on number of loops/height per loop/steps into loop to calculate 1,000,000,000,000 rocks.

```elixir
defmodule Part2 do
  @rows_to_track 30

  def solve(rock_shapes, jet_patterns, total_rocks) do
    {loop_state_key, loop_end_height, loop_end_index, states} =
      add_rocks_until_loop(rock_shapes, jet_patterns, MapSet.new(), 0, 0, 0, Map.new())

    {loop_start_height, loop_start_index} = states |> Map.fetch!(loop_state_key)
    loop_length = loop_end_index - loop_start_index
    loop_height_gain = loop_end_height - loop_start_height
    total_loops = div(total_rocks - loop_start_index, loop_length)
    total_loop_height_gain = total_loops * loop_height_gain
    steps_into_loop = total_rocks - (total_loops * loop_length + loop_start_index)

    {height_at_step_in_loop, _i} =
      states
      |> Map.values()
      |> Enum.find(fn {_h, i} -> i == steps_into_loop + loop_start_index - 1 end)

    total_loop_height_gain + height_at_step_in_loop
  end

  def add_rocks_until_loop(
        rock_shapes,
        jet_patterns,
        rock_positions,
        max_height,
        step,
        rock_index,
        previous_states
      ) do
    {updated_rock_positions, next_height, next_step} =
      RockFall.add_new_rock(
        rock_shapes,
        jet_patterns,
        rock_positions,
        max_height,
        step,
        rock_index
      )

    previous_state_key =
      {rem(next_step, Enum.count(jet_patterns)), rem(rock_index + 1, Enum.count(rock_shapes)),
       top_rows(next_height, updated_rock_positions)}

    if previous_states |> Map.has_key?(previous_state_key) do
      {previous_state_key, next_height, rock_index, previous_states}
    else
      updated_previous_states =
        previous_states |> Map.put(previous_state_key, {next_height, rock_index})

      add_rocks_until_loop(
        rock_shapes,
        jet_patterns,
        updated_rock_positions,
        max(next_height, max_height),
        next_step,
        rock_index + 1,
        updated_previous_states
      )
    end
  end

  def top_rows(max_height, rock_positions) do
    rock_positions
    |> MapSet.to_list()
    |> Enum.map(fn {x, y} -> {x, @rows_to_track + y - max_height} end)
    |> Enum.filter(fn {_x, y} -> y > 0 end)
    |> MapSet.new()
  end
end

Part2.solve(rock_shapes, test_input, 1_000_000_000_000)
```

```elixir
Part2.solve(rock_shapes, input, 1_000_000_000_000)
```
