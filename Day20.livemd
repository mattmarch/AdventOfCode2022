# Day 20

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input = File.read!("inputs/20.txt")
test_input = File.read!("inputs/test20.txt")
```

```elixir
defmodule Parse do
  def parse(input) do
    input
    |> String.split("\n")
    |> Enum.map(&String.to_integer/1)
  end
end

test_ciphertext = Parse.parse(test_input)
```

## Run mixing/decrypting

Including the ability to run the process multiple times (part 2).

```elixir
defmodule Decrypt do
  def decrypt(ciphertext), do: decrypt(ciphertext, 1)

  def decrypt(ciphertext, total_mixes) do
    ciphertext
    |> Enum.with_index()
    |> apply_n_times(fn t -> decrypt_next_chars(t, 0, Enum.count(ciphertext)) end, total_mixes)
    |> Enum.map(fn {n, _i} -> n end)
  end

  def apply_n_times(input, fun, n) do
    1..n
    |> Enum.reduce(input, fn _i, acc -> fun.(acc) end)
  end

  def decrypt_next_chars(ciphertext, current_index, length) when current_index >= length,
    do: ciphertext

  def decrypt_next_chars(ciphertext, current_index, length) do
    {{digit, ^current_index}, value_index} =
      ciphertext
      |> Enum.with_index()
      |> Enum.find(fn {{_, i}, _} -> i == current_index end)

    new_position = positive_rem(digit + value_index, length - 1)

    ciphertext
    |> List.delete_at(value_index)
    |> List.insert_at(new_position, {digit, current_index})
    |> decrypt_next_chars(current_index + 1, length)
  end

  def positive_rem(dividend, base) do
    rem(rem(dividend, base) + base, base)
  end
end

Decrypt.decrypt(test_ciphertext)
```

## Get the answer from the decrypted message

```elixir
defmodule Solve do
  @answer_positions [1000, 2000, 3000]

  def solve(plaintext) do
    zero_position = plaintext |> Enum.find_index(fn n -> n == 0 end)
    plaintext_length = plaintext |> Enum.count()

    @answer_positions
    |> Enum.map(fn p -> rem(p + zero_position, plaintext_length) end)
    |> Enum.map(fn p -> plaintext |> Enum.at(p) end)
    |> Enum.sum()
  end
end

test_ciphertext |> Decrypt.decrypt() |> Solve.solve()
```

```elixir
input |> Parse.parse() |> Decrypt.decrypt() |> Solve.solve()
```

## Solving part 2

Multiply each value by the _decryption key_ and run 10 iterations (of the modified solving code).

```elixir
defmodule Part2 do
  @decryption_key 811_589_153

  def decrypt_with_key(ciphertext) do
    ciphertext
    |> Enum.map(fn n -> n * @decryption_key end)
    |> Decrypt.decrypt(10)
  end
end

test_ciphertext |> Part2.decrypt_with_key() |> Solve.solve()
```

```elixir
input |> Parse.parse() |> Part2.decrypt_with_key() |> Solve.solve()
```
