# Day 10

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))

Mix.install([
  {:vega_lite, "~> 0.1.6"},
  {:kino_vega_lite, "~> 0.1.7"}
])
```

## Parse input

```elixir
input = File.read!("inputs/10.txt") |> String.split("\n")
testInput = File.read!("inputs/test10.txt") |> String.split("\n")
shortTestInput = ["noop", "addx 3", "addx -5"]
```

## Solving part 1

```elixir
defmodule Solve do
  def solve(instructions) do
    instructions
    |> get_all_x_values()
    |> Enum.with_index(1)
    |> Enum.drop(19)
    |> Enum.take_every(40)
    |> Enum.map(&Tuple.product/1)
    |> Enum.sum()
  end

  def get_all_x_values(instructions) do
    [
      1
      | instructions
        |> Enum.scan([1], &Solve.next_clock_cycles/2)
        |> Enum.flat_map(& &1)
    ]
  end

  def next_clock_cycles("noop", previous) do
    x = previous |> List.last()
    [x]
  end

  def next_clock_cycles("addx " <> num, previous) do
    x = previous |> List.last()
    [x, x + String.to_integer(num)]
  end
end

[1, 1, 1, 4, 4, -1] =
  shortTestInput
  |> Solve.get_all_x_values()

testInput
|> Solve.solve()
```

Real input...

```elixir
input
|> Solve.solve()
```

## Solving part 2

And then printing to screen

```elixir
defmodule Solve2 do
  def solve(instructions) do
    instructions
    |> Solve.get_all_x_values()
    |> Enum.with_index()
    |> Enum.map(fn {x, i} -> abs(rem(i, 40) - x) <= 1 end)
    |> Enum.map(fn bool ->
      if bool do
        "#"
      else
        " "
      end
    end)
    |> Enum.chunk_every(40)
    |> Enum.map(&Enum.join/1)
  end
end

testInput
|> Solve2.solve()
|> Enum.map(&IO.puts/1)
```

Finally part 2 with the real input

```elixir
input
|> Solve2.solve()
|> Enum.map(&IO.puts/1)
```

## Plotting part 1 for fun

```elixir
alias VegaLite, as: Vl
```

```elixir
x_values = input |> Solve.get_all_x_values()

signal =
  x_values
  |> Enum.with_index(1)
  |> Enum.map(&Tuple.product/1)

Vl.new()
|> Vl.data_from_values(x: x_values, signal: signal, cycle: 1..Enum.count(x_values))
|> Vl.concat([
  Vl.new(width: 300, height: 300)
  |> Vl.data_from_values(x: x_values, signal: signal, cycle: 1..Enum.count(x_values))
  |> Vl.encode_field(:x, "cycle", type: :quantitative)
  |> Vl.encode_field(:y, "x", type: :quantitative)
  |> Vl.mark(:line),
  Vl.new(width: 300, height: 300)
  |> Vl.data_from_values(x: x_values, signal: signal, cycle: 1..Enum.count(x_values))
  |> Vl.encode_field(:x, "cycle", type: :quantitative)
  |> Vl.encode_field(:y, "signal", type: :quantitative)
  |> Vl.mark(:line)
])
```
