# Day 15

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input = File.read!("inputs/15.txt")
test_input = File.read!("inputs/test15.txt")
```

```elixir
defmodule Parse do
  def parse(input) do
    input
    |> String.split("\n")
    |> Enum.map(&parse_line/1)
  end

  def parse_line(line) do
    [sensor_x, sensor_y, beacon_x, beacon_y] =
      Regex.scan(~r/[-]?[0-9]+/, line)
      |> Enum.map(fn [x] -> String.to_integer(x) end)

    {{sensor_x, sensor_y}, {beacon_x, beacon_y}}
  end
end

test_input |> Parse.parse()
```

## Finding the Manhattan distance given two points

```elixir
defmodule ManhattanDistance do
  def get({a_x, a_y}, {b_x, b_y}) do
    abs(a_x - b_x) + abs(a_y - b_y)
  end
end

test_input
|> Parse.parse()
|> Enum.map(fn {sensor, beacon} -> ManhattanDistance.get(sensor, beacon) end)
```

## Solving part 1

Calculating the range of each row covered by a particular sensor, then combine those ranges into fewer ranges with zero overlapping.

```elixir
defmodule Solve do
  def solve(sensors_and_beacons, target_row) do
    get_covered_in_row(sensors_and_beacons, target_row) -
      get_beacons_in_row(sensors_and_beacons, target_row)
  end

  def get_covered_in_row(sensors_and_beacons, target_row) do
    sensors_and_beacons
    |> get_ranges_covered_in_row(target_row)
    |> Enum.map(&areas_covered_by_range/1)
    |> Enum.sum()
  end

  def get_ranges_covered_in_row(sensors_and_beacons, target_row) do
    sensors_and_beacons
    |> Enum.map(fn {sensor, beacon} -> range_on_row(target_row, sensor, beacon) end)
    |> Enum.reduce([], &add_range/2)
  end

  def get_beacons_in_row(sensors_and_beacons, target_row) do
    sensors_and_beacons
    |> Enum.filter(fn {_sensor, {_x, y}} -> y == target_row end)
    |> Enum.uniq_by(fn {_sensor, beacon} -> beacon end)
    |> Enum.count()
  end

  def areas_covered_by_range({r_start, r_end}) do
    1 + r_end - r_start
  end

  def range_on_row(target_row, {sensor_x, sensor_y}, beacon) do
    distance = ManhattanDistance.get({sensor_x, sensor_y}, beacon)
    vertical_distance = abs(target_row - sensor_y)

    if distance >= vertical_distance do
      half_range = distance - vertical_distance
      {sensor_x - half_range, sensor_x + half_range}
    else
      nil
    end
  end

  def add_range(nil, ranges), do: ranges

  def add_range(range, ranges) do
    case ranges |> Enum.find(fn r -> ranges_overlap?(r, range) end) do
      nil ->
        [range | ranges]

      overlapping_range ->
        add_range(
          merge_overlapping_ranges(overlapping_range, range),
          ranges |> Enum.filter(fn r -> r != overlapping_range end)
        )
    end
  end

  def ranges_overlap?({a_start, a_end}, {b_start, b_end}) do
    b_start <= a_end and b_end >= a_start
  end

  def merge_overlapping_ranges({a_start, a_end}, {b_start, b_end}) do
    {min(a_start, b_start), max(a_end, b_end)}
  end
end

test_input |> Parse.parse() |> Solve.solve(10)
```

```elixir
input |> Parse.parse() |> Solve.solve(2_000_000)
```

## Solving part 2

1. Use part 1 functions to find all the ranges on a row once overlapping have been combined.
2. Remove all ranges outside the search area.
3. Run this through all possible rows until we find one with two ranges - there should be a gap of one space between them - this is the coordinate!

```elixir
defmodule Solve2 do
  def solve(sensors_and_beacons, {min_limit, max_limit}) do
    {y, ranges_in_row} =
      min_limit..max_limit
      |> Enum.map(fn y -> {y, Solve.get_ranges_covered_in_row(sensors_and_beacons, y)} end)
      |> Enum.map(fn {y, ranges} ->
        {y, clamp_ranges_in_limits(ranges, {min_limit, max_limit})}
      end)
      |> Enum.find(fn {_y, ranges} -> Enum.count(ranges) > 1 end)

    {^min_limit, end_of_first_range} =
      ranges_in_row
      |> Enum.sort_by(fn {range_start, _range_end} -> range_start end)
      |> hd()

    y + 4_000_000 * (end_of_first_range + 1)
  end

  def clamp_ranges_in_limits(ranges, limits) do
    ranges
    |> Enum.map(fn range -> clamp_range_in_limits(range, limits) end)
    |> Enum.filter(fn r -> r != nil end)
  end

  def clamp_range_in_limits({range_start, range_end}, {min_limit, max_limit}) do
    if Solve.ranges_overlap?({range_start, range_end}, {min_limit, max_limit}) do
      {max(range_start, min_limit), min(range_end, max_limit)}
    else
      nil
    end
  end
end

test_input |> Parse.parse() |> Solve2.solve({0, 20})
```

Running it on the real input, timing it for fun - takes ~14s.

```elixir
solve = fn -> input |> Parse.parse() |> Solve2.solve({0, 4_000_000}) end

{time_us, result} = :timer.tc(solve)

IO.puts("Part 2 time taken (parsing to solving): #{time_us / 1_000_000}s")

result
```
