# Day 19

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input = File.read!("inputs/19.txt")
test_input = File.read!("inputs/test19.txt")
```

## Define reusable Quantities and Blueprint structs and parse input

```elixir
defmodule Quantities do
  defstruct ore: 0, clay: 0, obsidian: 0, geodes: 0

  def add(a, b) do
    %Quantities{
      ore: a.ore + b.ore,
      clay: a.clay + b.clay,
      obsidian: a.obsidian + b.obsidian,
      geodes: a.geodes + b.geodes
    }
  end

  def subtract(minuend, subtrahend) do
    %Quantities{
      ore: minuend.ore - subtrahend.ore,
      clay: minuend.clay - subtrahend.clay,
      obsidian: minuend.obsidian - subtrahend.obsidian,
      geodes: minuend.geodes - subtrahend.geodes
    }
  end

  def negative?(quantities) do
    quantities
    |> Map.values()
    |> Enum.any?(fn q -> q < 0 end)
  end

  def maximum(quantities_enum) do
    quantities_enum
    |> Enum.reduce(fn q, a -> Quantities.maximum(q, a) end)
  end

  def maximum(a, b) do
    %Quantities{
      ore: max(a.ore, b.ore),
      clay: max(a.clay, b.clay),
      obsidian: max(a.obsidian, b.obsidian),
      geodes: max(a.geodes, b.geodes)
    }
  end

  def better_or_equal_than?(quantities, compare_to) do
    quantities
    |> Map.to_list()
    |> Enum.all?(fn {key, value} -> value >= Map.fetch!(compare_to, key) end)
  end
end

defmodule Blueprint do
  defstruct [:number, :ore_cost, :clay_cost, :obsidian_cost, :geode_cost]

  def parse_all(input) do
    input
    |> String.split("\n")
    |> Enum.map(&parse_single/1)
  end

  def parse_single(line) do
    ["Blueprint " <> number, costs] = line |> String.split(": ")

    [ore_cost, clay_cost, obsidian_cost, geode_cost] =
      costs
      |> String.split(".")
      |> Enum.drop(-1)
      |> Enum.map(&parse_cost/1)

    %Blueprint{
      number: String.to_integer(number),
      ore_cost: ore_cost,
      clay_cost: clay_cost,
      obsidian_cost: obsidian_cost,
      geode_cost: geode_cost
    }
  end

  def parse_cost(cost_statement) do
    [_, materials] = cost_statement |> String.split(" costs ")

    materials
    |> String.split(" and ")
    |> Enum.reduce(
      %Quantities{},
      &parse_material/2
    )
  end

  def parse_material(material_string, cost_acc) do
    [number, material] =
      material_string
      |> String.split()

    case material do
      "ore" -> %Quantities{cost_acc | ore: String.to_integer(number)}
      "clay" -> %Quantities{cost_acc | clay: String.to_integer(number)}
      "obsidian" -> %Quantities{cost_acc | obsidian: String.to_integer(number)}
    end
  end
end

test_blueprints = test_input |> Blueprint.parse_all()
```

## Run the simulation

This involves calculating a very arbitrary `score` and choosing the top 100,000 paths by score to narrow the search space.

```elixir
defmodule Simulation do
  def run(blueprint, time) do
    run_steps(
      [{%Quantities{ore: 1}, %Quantities{}}],
      blueprint,
      get_maximum_robots_per_type(blueprint),
      time
    )
  end

  def run_steps(possible_states, _blueprint, _maximums, 0), do: possible_states

  def run_steps(possible_states, blueprint, maximums, remaining) do
    possible_states
    |> Enum.flat_map(fn {robots, materials} ->
      possible_steps_from_state(blueprint, maximums, robots, materials)
    end)
    |> Enum.uniq()
    |> Enum.sort_by(&score/1, :desc)
    |> Enum.take(100_000)
    |> run_steps(blueprint, maximums, remaining - 1)
  end

  def possible_steps_from_state(blueprint, maximums, robots, materials) do
    case try_build_robot(:geodes, materials, blueprint) do
      {:geodes, remaining} ->
        [run_minute(robots, remaining, :geodes)]

      nil ->
        [:none, :ore, :clay, :obsidian, :geodes]
        |> Enum.reject(fn t -> maximum_robot_type_reached(t, robots, maximums) end)
        |> Enum.map(fn type -> type |> try_build_robot(materials, blueprint) end)
        |> Enum.filter(fn b -> b != nil end)
        |> Enum.map(fn {type, remaining_materials} ->
          run_minute(robots, remaining_materials, type)
        end)
    end
  end

  def score({robots, materials}) do
    [
      1 * robots.ore,
      1 * robots.clay,
      50 * robots.obsidian,
      100 * robots.geodes,
      1 * materials.ore,
      1 * materials.clay,
      5 * materials.obsidian,
      100 * materials.geodes
    ]
    |> Enum.sum()
  end

  def maximum_robot_type_reached(:none, _robots, _maximums), do: false
  def maximum_robot_type_reached(:geodes, _robots, _maximums), do: false

  def maximum_robot_type_reached(robot_type, robots, maximums) do
    Map.get(robots, robot_type) == Map.get(maximums, robot_type)
  end

  def get_maximum_robots_per_type(blueprint) do
    blueprint
    |> Map.from_struct()
    |> Map.drop([:number])
    |> Map.values()
    |> Quantities.maximum()
  end

  def try_build_robot(:none, materials, _blueprint) do
    {:none, materials}
  end

  def try_build_robot(robot_type, materials, blueprint) do
    cost = robot_cost(robot_type, blueprint)
    remaining_materials = materials |> Quantities.subtract(cost)

    if remaining_materials |> Quantities.negative?() do
      nil
    else
      {robot_type, remaining_materials}
    end
  end

  def robot_cost(:ore, blueprint), do: blueprint.ore_cost
  def robot_cost(:clay, blueprint), do: blueprint.clay_cost
  def robot_cost(:obsidian, blueprint), do: blueprint.obsidian_cost
  def robot_cost(:geodes, blueprint), do: blueprint.geode_cost

  def run_minute(robots, materials, build_robot_type) do
    {
      robots |> build_robot(build_robot_type),
      materials |> harvest_materials(robots)
    }
  end

  def build_robot(robots, :none), do: robots

  def build_robot(robots, robot_type) do
    robots |> Map.update!(robot_type, fn n -> n + 1 end)
  end

  def harvest_materials(materials, robots) do
    materials |> Quantities.add(robots)
  end
end

res =
  Simulation.run(test_blueprints |> hd, 24)
  |> Enum.max_by(fn {_robots, materials} -> materials.geodes end)
```

```elixir
defmodule Solve do
  def solve(blueprints, minutes) do
    blueprints
    |> Enum.map(fn b -> b.number * best_score_for_blueprint(b, minutes) end)
    |> Enum.sum()
  end

  def best_score_for_blueprint(blueprint, minutes) do
    blueprint
    |> Simulation.run(minutes)
    |> Enum.map(fn {_robots, materials} -> materials.geodes end)
    |> Enum.max()
  end
end

test_blueprints |> Solve.solve(24)
```

```elixir
input |> Blueprint.parse_all() |> Solve.solve(24)
```

## Part 2

```elixir
defmodule Solve2 do
  def solve(blueprints, minutes) do
    blueprints
    |> Enum.take(3)
    |> Enum.map(fn b -> Solve.best_score_for_blueprint(b, minutes) end)
    |> Enum.product()
  end
end

test_blueprints |> Solve2.solve(32)
```

```elixir
input |> Blueprint.parse_all() |> Solve2.solve(32)
```
