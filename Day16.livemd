# Day 16

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input = File.read!("inputs/16.txt")
test_input = File.read!("inputs/test16.txt")
```

```elixir
defmodule Valve do
  defstruct [:name, :flow_rate, :tunnels]

  def parse_all(input) do
    input
    |> String.split("\n")
    |> Enum.map(&parse_line/1)
  end

  def parse_line(line) do
    [name_and_flow_rate, tunnel_string] = line |> String.split("; ")
    tunnels = parse_tunnels(tunnel_string)
    {valve_name, flow_rate} = parse_name_and_flow_rate(name_and_flow_rate)
    %Valve{name: valve_name, flow_rate: flow_rate, tunnels: tunnels}
  end

  def parse_tunnels("tunnels lead to valves " <> tunnel_list) do
    tunnel_list |> String.split(", ")
  end

  def parse_tunnels("tunnel leads to valve " <> tunnel) do
    [tunnel]
  end

  def parse_name_and_flow_rate(name_and_flow_rate_string) do
    ["Valve", valve_name, "has", "flow", "rate=" <> flow_rate] =
      name_and_flow_rate_string |> String.split()

    {valve_name, String.to_integer(flow_rate)}
  end
end

test_valves = test_input |> Valve.parse_all()
```

## Use Dijkstra to find the shortest path between all the "active" valves

```elixir
defmodule ValveDistance do
  defstruct [:distance, :visited, :valve]

  def get_all_valve_map(valve_list, start_valve) do
    valve_list
    |> Enum.filter(fn valve -> valve.flow_rate > 0 or valve.name == start_valve end)
    |> Map.new(fn active_valve ->
      {active_valve.name, get_distances_from_valve(active_valve.name, valve_list)}
    end)
  end

  def get_distances_from_valve(from_valve, valve_list) do
    valve_list
    |> Enum.map(fn valve ->
      {valve.name, %ValveDistance{distance: nil, visited: false, valve: valve}}
    end)
    |> Map.new()
    |> Map.update!(from_valve, fn valve_distance ->
      %ValveDistance{valve_distance | distance: 0}
    end)
    |> update_distances()
    |> Map.values()
    |> Enum.filter(fn %ValveDistance{valve: valve} ->
      valve.flow_rate > 0 and valve.name != from_valve
    end)
    |> Map.new(fn valve_distance -> {valve_distance.valve.name, valve_distance.distance} end)
  end

  def update_distances(valve_distance_map) do
    next_valve_distance =
      valve_distance_map
      |> Map.values()
      |> Enum.filter(fn valve_distance ->
        not valve_distance.visited and valve_distance.distance != nil
      end)
      |> Enum.min_by(fn valve_distance -> valve_distance.distance end)

    updated_map =
      next_valve_distance.valve.tunnels
      |> Enum.map(fn valve_name -> Map.fetch!(valve_distance_map, valve_name) end)
      |> Enum.filter(fn valve_distance -> valve_distance.distance == nil end)
      |> Enum.map(fn valve_distance ->
        %ValveDistance{valve_distance | distance: next_valve_distance.distance + 1}
      end)
      |> Enum.reduce(valve_distance_map, fn valve_distance, map ->
        map |> Map.put(valve_distance.valve.name, valve_distance)
      end)
      |> Map.update!(next_valve_distance.valve.name, fn valve_distance ->
        %ValveDistance{valve_distance | visited: true}
      end)

    if all_completed?(updated_map) do
      updated_map
    else
      update_distances(updated_map)
    end
  end

  def all_completed?(valve_distance_map) do
    valve_distance_map |> Map.values() |> Enum.all?(fn vd -> vd.visited end)
  end
end

ValveDistance.get_all_valve_map(test_valves, "AA")
```

## Using the distance map calculated above, recursively try all combinations of the "active" valves

```elixir
defmodule VisitValves do
  def solve(valve_list, start_point, total_time) do
    visit_all_valves(valve_list, start_point, total_time)
    |> Enum.map(fn {pressure, _visited} -> pressure end)
    |> Enum.max()
  end

  def visit_all_valves(valve_list, start_point, total_time) do
    active_valves = valve_list |> Enum.filter(fn valve -> valve.flow_rate > 0 end)
    valve_distance_map = ValveDistance.get_all_valve_map(valve_list, start_point)
    valves = active_valves |> Map.new(fn v -> {v.name, v} end)

    try_visit_all_unvisited_valves(start_point, [], 0, total_time, valve_distance_map, valves)
  end

  def visit_next_valves(
        previous_valve,
        next_valve,
        visited_valves,
        pressure_released,
        time_remaining,
        distance_map,
        valves
      ) do
    distance = distance_map |> Map.fetch!(previous_valve) |> Map.fetch!(next_valve)
    time_remaining_after_valve = time_remaining - distance - 1

    if time_remaining_after_valve <= 0 do
      [{pressure_released, visited_valves}]
    else
      %Valve{flow_rate: valve_flow_rate} = valves |> Map.fetch!(next_valve)
      total_pressure_released_from_valve = time_remaining_after_valve * valve_flow_rate
      pressure_released_after_valve = pressure_released + total_pressure_released_from_valve
      updated_visited_valves = [next_valve | visited_valves]

      try_visit_all_unvisited_valves(
        next_valve,
        updated_visited_valves,
        pressure_released_after_valve,
        time_remaining_after_valve,
        distance_map,
        valves
      )
    end
  end

  def try_visit_all_unvisited_valves(
        last_valve,
        visited_valves,
        pressure_released,
        time_remaining,
        distance_map,
        valves
      ) do
    [
      {pressure_released, visited_valves}
      | valves
        |> Map.keys()
        |> Enum.filter(fn v -> v not in visited_valves end)
        |> Enum.flat_map(fn v ->
          visit_next_valves(
            last_valve,
            v,
            visited_valves,
            pressure_released,
            time_remaining,
            distance_map,
            valves
          )
        end)
    ]
  end
end

test_valves |> VisitValves.solve("AA", 30)
```

```elixir
input |> Valve.parse_all() |> VisitValves.solve("AA", 30)
```

## Part 2

Find all possible routes, find the best route that goes through a given set of valves, do cartesian product with itself and find the highest combination of disjoint routes.

```elixir
defmodule Solve2 do
  def solve(valve_list, start_point, total_time) do
    all_routes =
      VisitValves.visit_all_valves(valve_list, start_point, total_time)
      |> Enum.map(fn {pressure, route} -> {pressure, MapSet.new(route)} end)

    best_routes =
      all_routes
      |> Enum.group_by(fn {_p, r} -> r end, fn {p, _r} -> p end)
      |> Map.to_list()
      |> Enum.map(fn {route, pressures} -> {route, Enum.max(pressures)} end)

    possible_pressures =
      for {r1, p1} <- best_routes, {r2, p2} <- best_routes, MapSet.disjoint?(r1, r2), do: p1 + p2

    possible_pressures |> Enum.max()
  end
end

test_valves |> Solve2.solve("AA", 26)
```

```elixir
input |> Valve.parse_all() |> Solve2.solve("AA", 26)
```
